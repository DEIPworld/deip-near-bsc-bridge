/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BridgeAssistBSC,
  BridgeAssistBSCInterface,
} from "../BridgeAssistBSC";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_erc20",
        type: "address",
      },
      {
        internalType: "address",
        name: "_backend",
        type: "address",
      },
      {
        internalType: "address",
        name: "_feeAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Dispense",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "string",
        name: "target",
        type: "string",
      },
    ],
    name: "Upload",
    type: "event",
  },
  {
    inputs: [],
    name: "backend",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "checkUserLock",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "targetAddr",
            type: "string",
          },
        ],
        internalType: "struct BridgeAssistBSC.Lock",
        name: "userLock",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "clearLock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "dispense",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "erc20",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeDenominator",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeNumerator",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_target",
        type: "string",
      },
    ],
    name: "upload",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260916001556103e86002553480156200001c57600080fd5b50604051620015133803806200151383398181016040528101906200004291906200013b565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506200020d565b6000815190506200011e81620001d9565b92915050565b6000815190506200013581620001f3565b92915050565b6000806000606084860312156200015157600080fd5b6000620001618682870162000124565b935050602062000174868287016200010d565b925050604062000187868287016200010d565b9150509250925092565b60006200019e82620001b9565b9050919050565b6000620001b28262000191565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001e48162000191565b8114620001f057600080fd5b50565b620001fe81620001a5565b81146200020a57600080fd5b50565b6112f6806200021d6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063785e9e8611610066578063785e9e861461010e5780638dc735211461012c578063a578c2da14610148578063bef54a5e14610178578063e86dea4a1461019457610093565b8063099e413314610098578063180b0d7e146100b657806341275358146100d45780634d725e95146100f2575b600080fd5b6100a06101b2565b6040516100ad9190610d56565b60405180910390f35b6100be6101d8565b6040516100cb9190610e6e565b60405180910390f35b6100dc6101de565b6040516100e99190610d56565b60405180910390f35b61010c60048036038101906101079190610b9f565b610204565b005b610116610478565b6040516101239190610dd1565b60405180910390f35b61014660048036038101906101419190610b11565b61049c565b005b610162600480360381019061015d9190610b11565b6105dd565b60405161016f9190610e4c565b60405180910390f35b610192600480360381019061018d9190610b3a565b610709565b005b61019c610983565b6040516101a99190610e6e565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008211610247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023e90610e2c565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154146102cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c390610e0c565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161032993929190610d71565b602060405180830381600087803b15801561034357600080fd5b505af1158015610357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037b9190610b76565b5081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190805190602001906104199291906109ad565b50806040516104289190610d3f565b6040518091039020823373ffffffffffffffffffffffffffffffffffffffff167f60fba7085f9c79138a601dd1af00e09e61ed6d762e7536ab41ac195be82e5f7e60405160405180910390a45050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461052c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052390610dec565b60405180910390fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060405180602001604052806000815250600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190805190602001906105d99291906109ad565b5050565b6105e5610a33565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154816000018181525050600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805461067e90611084565b80601f01602080910402602001604051908101604052809291908181526020018280546106aa90611084565b80156106f75780601f106106cc576101008083540402835291602001916106f7565b820191906000526020600020905b8154815290600101906020018083116106da57829003601f168201915b50505050508160200181905250919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079090610dec565b60405180910390fd5b60006107a482610989565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8483856107ef9190610fa2565b6040518363ffffffff1660e01b815260040161080c929190610da8565b602060405180830381600087803b15801561082657600080fd5b505af115801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190610b76565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016108dc929190610da8565b602060405180830381600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e9190610b76565b50808261093b9190610fa2565b8373ffffffffffffffffffffffffffffffffffffffff167feb9df064f68e905565a2656b40e16dd2df0c9c21d72fda0d3a97de56f826f3d860405160405180910390a3505050565b60015481565b60006002546001548361099c9190610f48565b6109a69190610f17565b9050919050565b8280546109b990611084565b90600052602060002090601f0160209004810192826109db5760008555610a22565b82601f106109f457805160ff1916838001178555610a22565b82800160010185558215610a22579182015b82811115610a21578251825591602001919060010190610a06565b5b509050610a2f9190610a4d565b5090565b604051806040016040528060008152602001606081525090565b5b80821115610a66576000816000905550600101610a4e565b5090565b6000610a7d610a7884610eae565b610e89565b905082815260208101848484011115610a9557600080fd5b610aa0848285611042565b509392505050565b600081359050610ab78161127b565b92915050565b600081519050610acc81611292565b92915050565b600082601f830112610ae357600080fd5b8135610af3848260208601610a6a565b91505092915050565b600081359050610b0b816112a9565b92915050565b600060208284031215610b2357600080fd5b6000610b3184828501610aa8565b91505092915050565b60008060408385031215610b4d57600080fd5b6000610b5b85828601610aa8565b9250506020610b6c85828601610afc565b9150509250929050565b600060208284031215610b8857600080fd5b6000610b9684828501610abd565b91505092915050565b60008060408385031215610bb257600080fd5b6000610bc085828601610afc565b925050602083013567ffffffffffffffff811115610bdd57600080fd5b610be985828601610ad2565b9150509250929050565b610bfc81610fd6565b82525050565b610c0b8161101e565b82525050565b6000610c1c82610edf565b610c268185610eea565b9350610c36818560208601611051565b610c3f816111a3565b840191505092915050565b6000610c5582610edf565b610c5f8185610f0c565b9350610c6f818560208601611051565b80840191505092915050565b6000610c88602683610efb565b9150610c93826111b4565b604082019050919050565b6000610cab602383610efb565b9150610cb682611203565b604082019050919050565b6000610cce601c83610efb565b9150610cd982611252565b602082019050919050565b6000604083016000830151610cfc6000860182610d21565b5060208301518482036020860152610d148282610c11565b9150508091505092915050565b610d2a81611014565b82525050565b610d3981611014565b82525050565b6000610d4b8284610c4a565b915081905092915050565b6000602082019050610d6b6000830184610bf3565b92915050565b6000606082019050610d866000830186610bf3565b610d936020830185610bf3565b610da06040830184610d30565b949350505050565b6000604082019050610dbd6000830185610bf3565b610dca6020830184610d30565b9392505050565b6000602082019050610de66000830184610c02565b92915050565b60006020820190508181036000830152610e0581610c7b565b9050919050565b60006020820190508181036000830152610e2581610c9e565b9050919050565b60006020820190508181036000830152610e4581610cc1565b9050919050565b60006020820190508181036000830152610e668184610ce4565b905092915050565b6000602082019050610e836000830184610d30565b92915050565b6000610e93610ea4565b9050610e9f82826110b6565b919050565b6000604051905090565b600067ffffffffffffffff821115610ec957610ec8611174565b5b610ed2826111a3565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610f2282611014565b9150610f2d83611014565b925082610f3d57610f3c611116565b5b828204905092915050565b6000610f5382611014565b9150610f5e83611014565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f9757610f966110e7565b5b828202905092915050565b6000610fad82611014565b9150610fb883611014565b925082821015610fcb57610fca6110e7565b5b828203905092915050565b6000610fe182610ff4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061102982611030565b9050919050565b600061103b82610ff4565b9050919050565b82818337600083830152505050565b60005b8381101561106f578082015181840152602081019050611054565b8381111561107e576000848401525b50505050565b6000600282049050600182168061109c57607f821691505b602082108114156110b0576110af611145565b5b50919050565b6110bf826111a3565b810181811067ffffffffffffffff821117156110de576110dd611174565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f546869732066756e6374696f6e206973207265737472696374656420746f206260008201527f61636b656e640000000000000000000000000000000000000000000000000000602082015250565b7f596f75722063757272656e74206c6f636b206973206e6f7420657175616c207460008201527f6f20300000000000000000000000000000000000000000000000000000000000602082015250565b7f416d6f756e742073686f756c64206265206d6f7265207468616e203000000000600082015250565b61128481610fd6565b811461128f57600080fd5b50565b61129b81610fe8565b81146112a657600080fd5b50565b6112b281611014565b81146112bd57600080fd5b5056fea26469706673582212200dbe738fcb882eeeebd5bb4e170a97d2ce7e0ada43cce20b1e69d51f94607c2264736f6c63430008010033";

type BridgeAssistBSCConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeAssistBSCConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeAssistBSC__factory extends ContractFactory {
  constructor(...args: BridgeAssistBSCConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BridgeAssistBSC";
  }

  deploy(
    _erc20: string,
    _backend: string,
    _feeAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BridgeAssistBSC> {
    return super.deploy(
      _erc20,
      _backend,
      _feeAddr,
      overrides || {}
    ) as Promise<BridgeAssistBSC>;
  }
  getDeployTransaction(
    _erc20: string,
    _backend: string,
    _feeAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _erc20,
      _backend,
      _feeAddr,
      overrides || {}
    );
  }
  attach(address: string): BridgeAssistBSC {
    return super.attach(address) as BridgeAssistBSC;
  }
  connect(signer: Signer): BridgeAssistBSC__factory {
    return super.connect(signer) as BridgeAssistBSC__factory;
  }
  static readonly contractName: "BridgeAssistBSC";
  public readonly contractName: "BridgeAssistBSC";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeAssistBSCInterface {
    return new utils.Interface(_abi) as BridgeAssistBSCInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeAssistBSC {
    return new Contract(address, _abi, signerOrProvider) as BridgeAssistBSC;
  }
}
